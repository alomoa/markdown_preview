{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Marked","setOptions","breaks","App","props","state","markdown","placeholder","tranlate","handleChange","bind","event","this","setState","target","value","console","log","className","onChange","React","Component","Editor","id","defaultValue","Preview","sanitizer","dompurify","sanitize","dangerouslySetInnerHTML","__html","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wQAKAA,IAAOC,WAAW,CAChBC,QAAO,I,IAGHC,E,kDAEJ,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAQ,CACXC,SAAUC,EACVC,SAAUR,IAAOO,IAEnB,EAAKE,aAAe,EAAKA,aAAaC,KAAlB,gBANJ,E,yDASLC,GACXC,KAAKC,SAAS,CACZP,SAAUK,EAAMG,OAAOC,MACvBP,SAAUR,IAAOW,EAAMG,OAAOC,SAEhCC,QAAQC,IAAIL,KAAKP,MAAMC,Y,+BAIvB,OACE,sBAAKY,UAAU,MAAf,UACE,cAAC,EAAD,CAAQH,MAAOH,KAAKP,MAAMC,SAAUa,SAAUP,KAAKH,eACnD,cAAC,EAAD,CAASM,MAAOH,KAAKP,MAAMG,kB,GAvBjBY,IAAMC,WA+BlBC,EAAS,SAAClB,GACZ,OACE,0BAAUmB,GAAG,SAASC,aAAcpB,EAAMW,MAAOI,SAAUf,EAAMe,YAOjEM,EAAU,SAACrB,GAEb,IAAMsB,EAAYC,IAAUC,SAC5B,OACI,qBAAKL,GAAG,UAAUM,wBAAyB,CAACC,OAAQJ,EAAUtB,EAAMW,WAOtER,EAAW,kNAgBFJ,IChEA4B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.285940c8.chunk.js","sourcesContent":["//import './App.css';\nimport React from 'react'\nimport Marked from 'marked'\nimport dompurify from 'dompurify'\n\nMarked.setOptions({\n  breaks:true,\n});\n\nclass App extends React.Component {\n  \n  constructor(props){\n    super(props)\n    this.state = {\n      markdown: placeholder,\n      tranlate: Marked(placeholder)\n    }\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event){\n    this.setState({\n      markdown: event.target.value,\n      tranlate: Marked(event.target.value)\n    });\n    console.log(this.state.markdown);\n  }\n  \n  render() {\n    return (\n      <div className=\"App\">\n        <Editor value={this.state.markdown} onChange={this.handleChange}/>\n        <Preview value={this.state.tranlate}/>\n      </div>\n    );\n    \n  }\n}\n\n\nconst Editor = (props) => {\n    return (\n      <textarea id=\"editor\" defaultValue={props.value} onChange={props.onChange}>\n      \n      </textarea>\n  );\n  \n}\n\nconst Preview = (props) => {\n  {\n    const sanitizer = dompurify.sanitize;\n    return(\n        <div id=\"preview\" dangerouslySetInnerHTML={{__html: sanitizer(props.value)}}>\n            \n        </div>\n    )\n  }\n}\n\nconst placeholder = `# This is a header\n## This is another header, but smaller\n[This is a link (are you feeling lucky?)](www.google.com)\n\n\\` Inline Code\\`\n\n\\`\\`\\`\nMulti line code block\n\\`\\`\\`\n\n>Quote block\n\n**Bold text**\n\n`\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import './index.css';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}